<#@ template debug="false" hostspecific="true" language="C#" #><#@ output extension=".cs" #>
<#@ include file="SQLServer.ttinclude" #>
<#@ assembly name="Microsoft.VisualBasic" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
using System;

<#
    string relativeOutputFilePath = null;
	var tables = LoadTables();
	var declKeys = " "; var fchange = " "; var getEnt = ""; var eTbl = ""; var getDf = ""; var loadTbl = ""; var clrKeys = "";
	
	var serviceProvider = this.Host as IServiceProvider;
	var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
	var solutionDirectory = System.IO.Path.GetDirectoryName(dte.Solution.FullName);

	XmlDocument doc = new XmlDocument();
	
    doc.Load(solutionDirectory + @"\LV.PocoMapping\SureHis.csdl");
	
    Dictionary<string, XmlNode> EntityType = new Dictionary<string, XmlNode>();
    Dictionary<string, XmlNode> Association = new Dictionary<string, XmlNode>();

    var f = doc.GetElementsByTagName("EntityType");

    for (int i = 0; i < f.Count; i++) {
        EntityType.Add(f.Item(i).Attributes["Name"].InnerText, f.Item(i));
    }

    var a = doc.GetElementsByTagName("Association");
    for (int i = 0; i < a.Count; i++)
    {
        Association.Add(a.Item(i).Attributes["Name"].InnerText, a.Item(i));
    }

	foreach(Table tbl in tables) {
    if(tbl.ClassName == "sysdiagrams") continue;
	if(declKeys != "") declKeys += "\n";
	declKeys += "\t\tstatic Keyed" + tbl.ClassName + " keys" + tbl.ClassName + ";\n";
	declKeys += "\t\tpublic static Keyed" + tbl.ClassName + " Keys" + tbl.ClassName + " { get { return keys" + tbl.ClassName + "; } set { keys" + tbl.ClassName + " = value; } }\n";
	if(fchange != "") fchange += "\n";
    fchange += "\t                case \"" + tbl.ClassName + "\":\n";
    fchange += "\t                    " + tbl.ClassName + " _" + tbl.ClassName + " = (" + tbl.ClassName + ")db.Entity;\n";
    fchange += "\t                    if (keys" + tbl.ClassName + " != null)\n";
	fchange += "\t                    {\n";
	fchange += "\t						switch (db.State) {\n"; 
	fchange += "\t							  case System.Data.Entity.EntityState.Added:\n";
	fchange += "\t								  keys" + tbl.ClassName + ".Add(_" + tbl.ClassName + ");\n";
	fchange += "\t								break;\n";
	fchange += "\t							case System.Data.Entity.EntityState.Modified:\n";
	fchange += "\t								  if (keys" + tbl.ClassName + ".ChangeItem(_" + tbl.ClassName + ".Key, _" + tbl.ClassName + ") == false)\n";
	fchange += "\t									keys" + tbl.ClassName + ".Add(_" + tbl.ClassName + ");\n";
	fchange += "\t								break;\n";
	fchange += "\t							case System.Data.Entity.EntityState.Deleted:\n";
	fchange += "\t								  if (keys" + tbl.ClassName + ".Contains(_" + tbl.ClassName + ".Key))\n";
	fchange += "\t									keys" + tbl.ClassName + ".Remove(_" + tbl.ClassName + ".Key);\n";
	fchange += "\t								break;\n";
	fchange += "\t						}\n";
	fchange += "\t					}\n";
    fchange += "\t                   if (OnRecordChanged != null) OnRecordChanged(new RecordInfo(db, _" + tbl.ClassName + ".Key));\n";
    fchange += "\t                   if (lvHub != null) { lvHub.Clients.All.recordChanged(new RecordInfo(db, _" + tbl.ClassName + ".Key)); }\n";
    fchange += "\t                   break;\n";
    
	if(getEnt == "") getEnt += "case \"" + tbl.ClassName + "\":\n";
	else getEnt += "\t\t\t\tcase \"" + tbl.ClassName + "\":\n";
    getEnt += "\t\t\t\t\treturn keys" + tbl.ClassName + " == null ? null : (IQueryable<TEntity>)keys" + tbl.ClassName + ".AsQueryable();\n";

	if(getDf == "") getDf += "case ETable." + tbl.ClassName + ":\n";
    else getDf +="\t\t\t\t\tcase ETable." + tbl.ClassName + ":\n";
    getDf += "\t\t\t\t\t\tkeys" + tbl.ClassName + " = new Keyed" + tbl.ClassName + "();\n";
    getDf += "\t\t\t\t\t\tkeys" + tbl.ClassName + ".LoadAll(repository);\n";
    getDf += "\t\t\t\t\t\tbreak;\n";
	
    if(loadTbl == "") loadTbl += "case \"" + tbl.ClassName + "\":\n";
	else loadTbl += "\t\t\t\tcase \"" + tbl.ClassName + "\":\n";
    loadTbl += "\t\t\t\t\tkeys" + tbl.ClassName + " = new Keyed" + tbl.ClassName + "();\n";
    loadTbl += "\t\t\t\t\tkeys" + tbl.ClassName + ".LoadAll(repository);\n";
    loadTbl += "\t\t\t\t\tbreak;\n";

	if(clrKeys == "") clrKeys += "if (keys" + tbl.ClassName + " != null) { keys" + tbl.ClassName + ".Dispose(); keys" + tbl.ClassName + " = null; }\n";
	else clrKeys += "\t\t\tif (keys" + tbl.ClassName + " != null) { keys" + tbl.ClassName + ".Dispose(); keys" + tbl.ClassName + " = null; }\n";

	if(eTbl == "") eTbl += "" + tbl.ClassName + "";
	else eTbl += ",\n\t\t" + tbl.ClassName + "";

	var listColumns = tbl.Columns; 
	var listFK = tbl.FKTables; 
	var listPk = tbl.PKs; 
	var listIdx = tbl.Indexes;
	bool hasPermissionsProperty = listColumns.Any(x=>x.CleanName == "Write" || x.CleanName == "Delete" || x.CleanName == "Share" || x.CleanName == "Assign"); 
	var keypair = ""; var keypairVal = ""; var keypairValK = ""; var declK = ""; var declV = ""; var condGetK = ""; int cnt = 0;
	foreach(var col in tbl.Columns) {		
		if(!col.IsPK) continue;
		if(cnt == 0) {
			keypair = "KeyValuePair<string, " + col.SysType + ">";
			keypairVal = "new " + keypair + "(\"" + col.CleanName + "\", " + col.CleanName + ")";
			keypairValK = "new " + keypair + "(\"" + col.CleanName + "\", k_" + col.CleanName + ")";
			declK = col.SysType + " k_" + col.CleanName;
			declV = "k_" + col.CleanName; condGetK = "o." + col.CleanName + " == k_" + col.CleanName;
		}else { 
			keypair = "KeyValuePair<" + keypair + ", " + "KeyValuePair<string, " + col.SysType + ">" +  ">";
			keypairVal = "new " + keypair + "(" + keypairVal + ", new KeyValuePair<string, " + col.SysType + ">(" + "\"" + col.CleanName + "\", " + col.CleanName + "))";
			keypairValK = "new " + keypair + "(" + keypairValK + ", new KeyValuePair<string, " + col.SysType + ">(" + "\"" + col.CleanName + "\", k_" + col.CleanName + "))";
			declK = declK + ", " + col.SysType + " k_" + col.CleanName;
			declV = declV + ", k_" + col.CleanName; condGetK = condGetK + " && " + "o." + col.CleanName + " == k_" + col.CleanName;
		}
		cnt++;
	}

#>
/* Lac Viet ERP                                                
 * Copyright (c) 2013 Lac Viet                                 
 * http://www.lacviet.com.vn                                   
 *=============================================================
 * File name            : <#=tbl.ClassName + ".cs" #>         
 * Created by           : Auto - <#=DateTime.Now #>                     
 * Last modify          : Auto - <#=DateTime.Now #>                     
 * Version              : 1.0                                  
 * ============================================================
 */
 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Collections.ObjectModel;
using LV.Poco.Validate;

namespace LV.Poco
{
	[Serializable]
	public partial class <#=tbl.ClassName#><# if(hasPermissionsProperty == false) { #> : BaseEntity, ICloneable<# } else { #> : ICloneable <# } #>
	{
		public <#=tbl.ClassName#>()
		{
<#foreach(var col in tbl.Columns){ #>
<#if(HasDefaultValue(col.DefaultSetting) == true) { #>
            this.<#=col.CleanName#> = <#=FormartedDFValue(col.DefaultSetting, col.SysType)#>;
<#}else if (col.SysType == "decimal" || col.SysType == "double"|| col.SysType == "int"|| col.SysType == "short"|| col.SysType == "long"){#>
			this.<#=col.CleanName#> = 0;
<#}}#>
		}

	    #region Properties
		[NotMapped]
		public <#=keypair#> Key { get { return <#=keypairVal#>; } }

<#foreach(var col in tbl.Columns){ #>

		private <#=col.SysType#><#=CheckNullable(col)#> _<#=col.CleanName#>;
<#if(col.IsPK) { #>

        [Key]
<#if(col.SysType != "Guid" && col.SysType != "bool") {#>
		[LVRegularExpression(@"[a-zA-Z0-9.,+_-]*")]
<#}#><#} #><#if(col.IsNullable == false && col.SysType != "bool") { #>
		[LVRequired]
<#} #><#if(col.SysType != "Guid" && col.SysType != "DateTime" && col.SysType != "bool" && col.MaxLength > 0) { #>
        [LVMaxLength(<#=col.MaxLength#>)]
<#} #>
        public <#=col.SysType#><#=CheckNullable(col)#> <#=col.CleanName#> { get { return _<#=col.CleanName#>; } set {<#if(col.SysType == "string" && col.IsNullable == false && col.DefaultSetting.ToString().Contains("''")) { #> if (value==null) value = string.Empty;<#} #>_<#=col.CleanName#> = value; } }
<#}#>

		<#=GenNegativeProperty(EntityType,Association,tbl.Name)#>

        #endregion

		#region ICloneable Members
        public object Clone()
        {
            return this.MemberwiseClone(); 
        }

        object ICloneable.Clone()
        {
            return this.MemberwiseClone();
        }
        #endregion

	}

	[Serializable]
    public class Keyed<#=tbl.ClassName#> : KeyedCollection<<#=keypair#>, <#=tbl.ClassName#>>, ICloneable, IDisposable
    {
        #region Constructor
        public Keyed<#=tbl.ClassName#>() : base() { }

        protected override <#=keypair#> GetKeyForItem(<#=tbl.ClassName#> item)
        {
            return item.Key;
        }

        public <#=keypair#> GetKey(<#=declK#>) { return <#=keypairValK#>; }

        public <#=keypair#> GetKey(object keypair) { try { return (<#=keypair#>)keypair; } catch { return new <#=keypair#>(); } }
        #endregion

        #region Method
        public bool AddObject(<#=tbl.ClassName#> item, LV.Core.DAL.Base.IRepository repository)
        {
            repository.Add(item);

            return true;
        }

        public bool ChangeItem(<#=keypair#> keypair, <#=tbl.ClassName#> item)
        {
            <#=tbl.ClassName#> orig = this.GetObjectByKey(keypair);
            if (orig != null)
            {
                int index = this.IndexOf(orig);
                this.SetItem(index, item);

                return true;
            }

            return false;
        }

		public bool UpdateObject(<#=tbl.ClassName#> item, LV.Core.DAL.Base.IRepository repository)
        {
            repository.Delete(item);
            
            return true;
        }

		public bool DeleteObject(<#=tbl.ClassName#> item, LV.Core.DAL.Base.IRepository repository)
        {
            repository.Update(item);
            
            return true;
        }

		public <#=tbl.ClassName#> GetObjectByKey(<#=declK#>) 
		{
            if (this.Contains(GetKey(<#=declV#>)) == false) return null;
            <#=tbl.ClassName#> ob = this[GetKey(<#=declV#>)];
            return (<#=tbl.ClassName#>)ob;
        }

		public <#=tbl.ClassName#> GetObjectByKey(<#=declK#>, LV.Core.DAL.Base.IRepository repository) 
		{
            if (this.Contains(GetKey(<#=declV#>)) == false) {
				<#=tbl.ClassName#> ob = repository.GetQuery<<#=tbl.ClassName#>>().FirstOrDefault(o => <#=condGetK#>);
				if(ob != null) this.Add(ob);
				return ob;
			}
            <#=tbl.ClassName#> obj = this[GetKey(<#=declV#>)];
            return (<#=tbl.ClassName#>)obj;
        }

		public <#=tbl.ClassName#> GetObjectByKey(<#=keypair#> keypair) 
		{
            if (this.Contains(keypair) == false) return null;
            <#=tbl.ClassName#> ob = this[keypair];
            return (<#=tbl.ClassName#>)ob;
        }

        public <#=tbl.ClassName#> GetObjectByKey(object keypair)
        {
            if (this.Contains(GetKey(keypair)) == false) return null;
            <#=tbl.ClassName#> ob = this[GetKey(keypair)];
            return (<#=tbl.ClassName#>)ob;
        }

		bool _LoadAll = false;
        public List<<#=tbl.ClassName#>> LoadAll(LV.Core.DAL.Base.IRepository repository)
        {
			if(_LoadAll) return this.ToList();
			var list = repository.GetQuery<<#=tbl.ClassName#>>().ToList();
			foreach (<#=tbl.ClassName#> item in list) {
				if(this.Contains(GetKey(item))) continue;
				this.Add(item);
			}
			_LoadAll = true;
            return list;
        }
		<#
	var lstTmp = new List<Index>();
	foreach(var idx in listIdx) {
		if(lstTmp.Any(o=> o.Name == idx.Name)) continue;
		var lst = listIdx.FindAll(o=> o.Name == idx.Name);
		var cond = ""; var condV = ""; var cond_DT = ""; var condV_DT = ""; 
		foreach(var ic in lst) { 
			var col = listColumns.Find(o=> o.CleanName == ic.Column_Name);
			if(col == null) continue;
			if(cond != "") {cond += ", "; condV += " && ";}
			cond += col.SysType + " p_" + col.CleanName;
			condV += "o." + col.CleanName + " == p_" + col.CleanName;
			if(col.SysType == "DateTime" && cond_DT == "") {
				cond_DT = "DateTime from_" + col.CleanName + ", DateTime to_" + col.CleanName;
				condV_DT = "o." + col.CleanName + " >= from_" + col.CleanName + " && o." + col.CleanName + " <= to_" + col.CleanName;
			}
		}
		lstTmp.AddRange(lst);#>

		public List<<#=tbl.ClassName#>> Load<#=idx.Name#>(<#=cond#>, LV.Core.DAL.Base.IRepository repository) {
			var list = repository.GetQuery<<#=tbl.ClassName#>>().Where(o=> <#=condV#>).ToList();
			foreach (<#=tbl.ClassName#> item in list) {
				if(this.Contains(GetKey(item))) continue;
				this.Add(item);
			}
            return list;
		}
		<#if(cond_DT != "") {#>

		public List<<#=tbl.ClassName#>> Load<#=idx.Name#>(<#=cond_DT#>, LV.Core.DAL.Base.IRepository repository) {
			var list = repository.GetQuery<<#=tbl.ClassName#>>().Where(o=> <#=condV_DT#>).ToList();
			foreach (<#=tbl.ClassName#> item in list) {
				if(this.Contains(GetKey(item))) continue;
				this.Add(item);
			}
            return list;
		}

		<#}#>
	<#}#>		
        #endregion

        #region Implement interface
        public object Clone()
        {
            return this.MemberwiseClone();
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
            GC.Collect();
        }

        // Protected implementation of Dispose pattern.
        bool disposed = false;
        protected virtual void Dispose(bool disposing)
        {
            if (disposed)
                return;

            if (disposing) {}

            // Free any unmanaged objects here.
            disposed = true;
        }

        ~Keyed<#=tbl.ClassName#>()
        {
            Dispose(false);
        }
       
        #endregion
        
    }

}
<#
        SaveOutput("Object\\" + tbl.ClassName + ".cs");
#>
<# System.Threading.Thread.Sleep(10);} #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity.Infrastructure;

namespace LV.Poco
{
	public class LVHubsHelper 
    {
		#region Declare KeyedCollection
		<#=declKeys#>
		#endregion
		public static event RecordChangedEventHandler OnRecordChanged;
		static bool isRunSyncDB = false;

        static Microsoft.AspNet.SignalR.IHubContext lvHub
        {
            get { return Microsoft.AspNet.SignalR.GlobalHost.ConnectionManager.GetHubContext<LVRecordInfoHub>(); }
        }

        public static void RunSyncDB() 
        {
			if(isRunSyncDB) return;
            LV.Core.DAL.EntityFramework.DBTracker.OnDBSavechanged += DBTracker_OnDBSavechanged;
			isRunSyncDB = true;
        }

        static void DBTracker_OnDBSavechanged(object sender, List<Core.DAL.EntityFramework.DBChangeTrackerInfo> listDBChanged)
        {
            try
            {
                OnSaveChanged(listDBChanged);
            }
            catch (Exception ex) {
                LVUtility.WriteLogFile("[LVHubsHelper.DBTracker_OnDBSavechanged]" + ex.Message);
            }
        }

        public static void OnSaveChanged(List<LV.Core.DAL.EntityFramework.DBChangeTrackerInfo> entries)
        {
            foreach (LV.Core.DAL.EntityFramework.DBChangeTrackerInfo db in entries) 
            {
                if (db.Entity == null) continue;
                string tblName = db.Entity.GetType().Name;
                switch (tblName) { 
                    <#=fchange#>
                }
            }
        }

        static List<string> lstTblGetDefault;
        public static void LoadDefaultDataList(List<ETable> lstTblGet, LV.Core.DAL.Base.IRepository repository)
        {
            lstTblGetDefault = new List<string>();
            foreach (ETable tblName in lstTblGet)
            {
				lstTblGetDefault.Add(tblName.ToString());
                switch (tblName)
                {
                    <#=getDf#>
                }
            }
        }

        public static void LoadTable(string tableName, LV.Core.DAL.Base.IRepository repository)
        {
            switch (tableName)
            {
                <#=loadTbl#>
            }
            if (lstTblGetDefault == null) lstTblGetDefault = new List<string>();
            lstTblGetDefault.Add(tableName);
        }

		public static IQueryable<TEntity> GetDataInHubs<TEntity>() where TEntity : class
        {
            if (lstTblGetDefault == null) return null;
            string entityName = typeof(TEntity).Name;
            if (lstTblGetDefault.Any(o => o == entityName) == false) return null;
            switch (entityName)
            {
                <#=getEnt#>
            }
            return null;
        }

        public static IQueryable<TEntity> GetDataInHubs<TEntity>(LV.Core.DAL.Base.IRepository repository) where TEntity : class
        {
            string entityName = typeof(TEntity).Name;
            if (lstTblGetDefault == null || lstTblGetDefault.Any(o => o == entityName) == false) 
            {
                LoadTable(entityName, repository);
            }

            return GetDataInHubs<TEntity>();
        }

        public static void ClearAllKeys()
        {
            <#=clrKeys#>
        }

	}

	public enum ETable 
	{
		<#=eTbl#>
	}

}

<#
        SaveOutput("Hubs\\LVHubsHelper.cs");
#>

<#+
    void SaveOutput(string outputFileName)
  {
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile) + "\\";
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }

        bool HasDefaultValue(object value)
        {
            bool rs = false;
            if (value != null)
            {
                if(String.IsNullOrWhiteSpace(value.ToString()) == false)
                rs = true;
            else 
                rs = false;
            }
            return rs;
        }

        object FormartedDFValue(object value, string sysType)
        {
               object rs = value.ToString()
                .Replace("(", "")
                .Replace(")", "")
                .Replace("'", "");
				
            if (sysType.Contains("DateTime"))
                rs = "DateTime.Now";
            else if (sysType == "Guid")
            {
                if (rs.Equals("newid"))
                    rs = "Guid.NewGuid()";
                else if (rs.Equals("00000000-0000-0000-0000-000000000000"))
                    rs = "Guid.Empty";
                else
                    rs = "Guid.Parse(\"" + rs + "\")";
            }
            else if(sysType == "bool")
            {
                if(rs.Equals("0"))
                    rs = "false";
                else
                    rs = "true";
            }
            else if(sysType == "string" && !rs.Equals("NULL"))
                rs = "\"" + rs + "\"";

			if (rs.Equals("NULL")) rs = "null";

            return rs;
        }

		string GenNegativeProperty(Dictionary<string, XmlNode> EntityType,Dictionary<string, XmlNode> Association, string Name){
			var Entity = EntityType[Name];
            string w = "";
            if (Entity != null) {
                for (int j = 0; j < Entity.ChildNodes.Count; j++)
                {
                    if (Entity.ChildNodes.Item(j).Name == "NavigationProperty")
                    {
                        var property = Entity.ChildNodes.Item(j);
                        var propertyName = property.Attributes["Name"].InnerText;
                        var propertyType = "";
                        var IsCollection = false;
                        var Relationship = property.Attributes["Relationship"].InnerText;
                        Relationship = Relationship.Substring(Relationship.IndexOf(".")+1);

                        var ToRoll = property.Attributes["ToRole"].InnerText;
                        var FromRoll = property.Attributes["FromRole"].InnerText;
                        var Ass = Association[Relationship];
                       if (Ass != null)
						{
							for (int i = 0; i < Ass.ChildNodes.Count; i++)
							{
								if(Ass.ChildNodes.Item(i).Attributes["Role"]!=null && Ass.ChildNodes.Item(i).Attributes["Role"].InnerText == ToRoll)
								{
									propertyType = Ass.ChildNodes.Item(i).Attributes["Type"].InnerText;
									propertyType = propertyType.Substring(propertyType.IndexOf(".") + 1);

									if (Ass.ChildNodes.Item(i).Attributes["Multiplicity"].InnerText.Contains("1")==false)
									{
										IsCollection = true;
									}

									w = w + "/// <summary>\n";
									w = w + "/// Ref Key: " + Relationship + "\n";
									w = w + "/// <summary>\n";
									// w = w + "public ";
									// if (IsCollection)
									// {
										// w = w + "ICollection<" + propertyType + "> " + propertyName + " { get; set; }\n\n";
									// }
									// else
									// {
										// w = w +  propertyType + " " + propertyName + " { get; set; }\n\n";
									// }
								}
							}    
						}
                        
                    }
                }
            }
            return w;
		}
#>